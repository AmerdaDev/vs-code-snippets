{
	// Place your snippets for php here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"Break line": {
		"prefix": "br",
		"body": [
			"echo '<br>';"
		],
		"description": "Break line"
	},
	"Die var_dump": {
		"prefix": "dd",
		"body": [
			"echo '<pre>';",
			"var_dump($1);",
			"echo '</pre>';",
			"die;",
		],
		"description": "Break line"
	},
	"Print_r": {
		"prefix": "prr",
		"body": [
			"echo '<pre>';",
			"print_r($1);",
			"echo '</pre>';"
		],
		"description": "Break line"
	},
	"Comment": {
		"prefix": "cmt",
		"body": [
			"/**",
			" * *-*",
			" *",
			" *  Template Name: $1",
			" * ",
			" * ",
			" * @package $2 ",
			" * @Version $3 ",
			"*-*-*-*/"
		],
		"description": "Break line"
	},
	"Simple Comment": {
		"prefix": "scmt",
		"body": [
			"/**",
			" * *-*",
			" *",
			" * $1",
			" * ",
			"*-*-*-*/"
		],
		"description": "Break line"
	},
	"post type": {
		"prefix": "posttype",
		"body": [
		  "/*",
		  "* Creating a function to create our $1 CPT",
		  "*/",
		  " ",
		  "function $2_post_type() {",
		  " ",
		  "// Set UI labels for Custom Post Type",
		  "    $$labels = array(",
		  "        'name'                => _x( '$3', 'Post Type General Name', '$5' ),",
		  "        'singular_name'       => _x( '$4', 'Post Type Singular Name', '$5' ),",
		  "        'menu_name'           => __( '$3', '$5' ),",
		  "        'parent_item_colon'   => __( 'Parent $4', '$5' ),",
		  "        'all_items'           => __( 'All $3', '$5' ),",
		  "        'view_item'           => __( 'View $4', '$5' ),",
		  "        'add_new_item'        => __( 'Add New $4', '$5' ),",
		  "        'add_new'             => __( 'Add New', '$5' ),",
		  "        'edit_item'           => __( 'Edit $4', '$5' ),",
		  "        'update_item'         => __( 'Update $4', '$5' ),",
		  "        'search_items'        => __( 'Search $4', '$5' ),",
		  "        'not_found'           => __( 'Not Found', '$5' ),",
		  "        'not_found_in_trash'  => __( 'Not found in Trash', '$5' ),",
		  "    );",
		  "     ",
		  "// Set other options for Custom Post Type",
		  "     ",
		  "    $$args = array(",
		  "        'label'               => __( '$3', '$5' ),",
		  "        'description'         => __( '$4 post type', '$5' ),",
		  "        'labels'              => $$labels,",
		  "        // Features this CPT supports in Post Editor",
		  "        'supports'            => array( 'title', 'editor', 'excerpt', 'author', 'thumbnail', 'comments', 'revisions', 'custom-fields', ),",
		  "        // You can associate this CPT with a taxonomy or custom taxonomy. ",
		  "        'taxonomies'          => array( $6 ),",
		  "        /* A hierarchical CPT is like Pages and can have",
		  "        * Parent and child items. A non-hierarchical CPT",
		  "        * is like Posts.",
		  "        */ ",
		  "        'hierarchical'        => false,",
		  "        'public'              => true,",
		  "        'show_ui'             => true,",
		  "        'show_in_menu'        => true,",
		  "        'show_in_nav_menus'   => true,",
		  "        'show_in_admin_bar'   => true,",
		  "        'menu_position'       => 5,",
		  "        'menu_icon'           => '$7',",
		  "        'can_export'          => true,",
		  "        'has_archive'         => true,",
		  "        'exclude_from_search' => false,",
		  "        'publicly_queryable'  => true,",
		  "        'capability_type'     => 'post',",
		  "        'show_in_rest' => true,",
		  " ",
		  "    );",
		  "     ",
		  "    // Registering your Custom Post Type",
		  "    register_post_type( '$2', $$args );",
		  " ",
		  "}",
		  " ",
		  "/* Hook into the 'init' action so that the function",
		  "* Containing our post type registration is not ",
		  "* unnecessarily executed. ",
		  "*/",
		  " ",
		  "add_action( 'init', '$2_post_type', 0 );"
		],
		"description": "post type"
	  },
	  "Create custom taxonomy": {
		"prefix": "taxonomy",
		"body": [
		  "add_action( 'init', '$2_taxonomy', 0 );",
		  " ",
		  "//create a custom taxonomy $1",
		  " ",
		  "function $2_taxonomy() {",
		  " ",
		  " ",
		  "  $$labels = array(",
		  "    'name' => _x( '$4', 'taxonomy general name' ),",
		  "    'singular_name' => _x( '$5', 'taxonomy singular name' ),",
		  "    'search_items' =>  __( 'Search $4' ),",
		  "    'all_items' => __( 'All $4', '$6' ),",
		  "    'parent_item' => __( 'Parent $5', '$6' ),",
		  "    'parent_item_colon' => __( 'Parent $5:', '$6' ),",
		  "    'edit_item' => __( 'Edit $5', '$6' ), ",
		  "    'update_item' => __( 'Update $5', '$6' ),",
		  "    'add_new_item' => __( 'Add New $5', '$6' ),",
		  "    'new_item_name' => __( 'New $5 Name', '$6' ),",
		  "    'menu_name' => __( '$4', '$6' ),",
		  "  );    ",
		  " ",
		  "// Now register the taxonomy",
		  "  register_taxonomy('$3',array('$7'), array(",
		  "    'hierarchical' => true,",
		  "    'labels' => $$labels,",
		  "    'show_ui' => true,",
		  "    'show_in_rest' => true,",
		  "    'show_admin_column' => true,",
		  "    'query_var' => true,",
		  "    'rewrite' => array( 'slug' => 'subject' ),",
		  "  ));",
		  " ",
		  "}"
		],
		"description": "Create custom taxonomy"
	  }
}